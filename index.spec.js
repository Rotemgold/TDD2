const booksFunction = require('./index');
const BooksApi = require('./BooksApi/BooksApi');
const testData = [
  {
    title_suggest: 'b',
    edition_key: [
      'OL9228183M',
      'OL7273472M',
      'OL9228706M',
      'OL7880665M',
      'OL7273997M',
      'OL7591523M',
      'OL26757374M',
      'OL22368666M',
      'OL10682853M',
      'OL13931725M',
      'OL9131875M',
      'OL23041746M',
      'OL22146871M',
      'OL9403108M',
      'OL25713997M',
      'OL25418637M',
      'OL25418638M',
      'OL6363476M',
      'OL13875539M',
      'OL6366662M',
      'OL7465523M',
      'OL20388227M',
      'OL22306424M',
      'OL26215711M',
      'OL20352933M',
      'OL22804790M',
      'OL24595247M',
      'OL26477626M',
      'OL7273993M',
      'OL5526619M',
      'OL17911508M',
      'OL22761592M',
      'OL9228702M',
      'OL5550061M',
      'OL13875540M',
      'OL24821416M',
      'OL22788094M',
      'OL24375966M',
      'OL21080822M',
      'OL21755817M',
      'OL22369858M',
      'OL21563144M',
      'OL10681592M',
      'OL20943852M',
      'OL9893405M',
      'OL5416735M',
      'OL10682118M',
      'OL21392107M',
      'OL13816361M',
      'OL21826254M',
      'OL14449234M',
      'OL10682346M',
      'OL20943855M',
      'OL20889660M',
      'OL24353783M',
      'OL10682512M',
      'OL20943857M',
      'OL25769448M',
      'OL4564473M',
      'OL11346306M',
      'OL10683016M',
      'OL18005904M',
      'OL7274001M',
      'OL9228710M',
      'OL13704499M',
      'OL14732029M',
      'OL23029810M',
      'OL20184901M',
      'OL9228714M',
      'OL10683695M',
      'OL13647849M',
      'OL20943873M',
      'OL12552002M',
      'OL9386429M',
      'OL16794971M',
      'OL7274023M',
      'OL10684408M',
      'OL2846909M',
      'OL23243829M',
      'OL22400371M',
      'OL9228732M',
      'OL7466619M',
      'OL10683697M',
      'OL25175071M',
      'OL8173448M',
      'OL10684787M',
      'OL7406702M',
      'OL22942197M',
      'OL13349152M',
      'OL7973618M',
      'OL11222908M',
      'OL11222907M',
      'OL21968605M',
      'OL9375349M',
      'OL9228757M',
      'OL18639215M',
      'OL2105246M',
      'OL9228719M',
      'OL7466434M',
      'OL7274010M',
      'OL13904400M',
      'OL7274048M',
      'OL26676168M',
      'OL9045059M',
      'OL2033157M',
      'OL10680912M',
      'OL20943433M',
      'OL7465912M',
      'OL24209616M',
      'OL11038748M',
      'OL7601880M',
      'OL8321425M',
      'OL22735149M',
      'OL7672902M',
      'OL13268184M',
      'OL9792607M',
      'OL11152615M',
      'OL22836306M',
      'OL1937352M',
      'OL7273597M',
      'OL18565780M',
      'OL21217150M',
      'OL9228308M',
      'OL25874285M',
      'OL7343773M',
      'OL10236396M',
      'OL9298426M',
      'OL22108089M',
      'OL10635185M',
      'OL9652680M',
      'OL22950280M',
      'OL23040293M',
      'OL22940107M',
      'OL14975006M',
      'OL7850230M',
      'OL10236379M',
      'OL7850059M',
      'OL9211339M',
      'OL7256623M',
      'OL18565795M',
      'OL8181272M',
      'OL9209105M',
      'OL22452236M',
      'OL8610139M',
      'OL8195345M',
      'OL26389331M',
      'OL26389332M',
      'OL9137990M',
      'OL24946057M',
      'OL9131905M',
      'OL24608072M',
      'OL402765M',
      'OL10236412M',
      'OL7851787M',
      'OL16197261M',
      'OL17487312M',
      'OL18326661M',
      'OL18360267M',
      'OL7827594M',
      'OL22105270M',
      'OL7260441M',
      'OL7853033M',
      'OL9215156M',
      'OL25422116M',
      'OL24992840M',
      'OL9547987M',
      'OL24225231M',
      'OL10977379M',
      'OL10686521M',
      'OL6887272M',
      'OL7759555M',
      'OL10236397M',
      'OL9209244M',
      'OL22153252M',
      'OL9443590M',
      'OL9032793M',
      'OL23032214M',
      'OL15950279M',
      'OL10457133M',
      'OL9188443M',
      'OL8833408M',
      'OL7946404M',
      'OL7261174M',
      'OL7603640M',
      'OL10236401M',
      'OL24486716M',
      'OL9215889M',
      'OL10236413M',
      'OL9131849M',
      'OL26371117M',
      'OL9011370M',
      'OL9158189M',
      'OL12815020M',
      'OL8151615M',
      'OL8151617M',
      'OL10686044M',
      'OL9216158M',
      'OL7946036M',
      'OL9215852M',
      'OL8663942M',
      'OL3969888M',
      'OL7261137M',
      'OL24374464M',
      'OL24486835M',
      'OL7261443M',
      'OL9786619M',
      'OL8663943M',
      'OL7602066M',
      'OL9018092M',
      'OL7946405M',
      'OL9786395M',
      'OL20319069M',
      'OL25441857M',
      'OL8663969M',
      'OL7604539M',
      'OL7262174M',
      'OL9217079M',
      'OL7262364M',
      'OL10636822M',
      'OL3571142M',
      'OL9216889M',
      'OL10236414M',
      'OL10925146M',
      'OL8373889M',
      'OL23246795M',
      'OL9604991M',
      'OL12384893M',
      'OL9131936M',
      'OL16355411M',
      'OL10636839M',
      'OL9032161M',
      'OL23042414M',
      'OL8890613M',
      'OL10925422M',
      'OL8887608M',
      'OL10636840M',
      'OL9143965M',
      'OL8875466M',
      'OL7262049M',
      'OL9217398M',
      'OL7262683M',
      'OL7262684M',
      'OL10952411M',
      'OL9217399M',
      'OL3567009M',
      'OL7852209M',
      'OL9216764M',
      'OL7262739M',
      'OL9217454M',
      'OL23070303M',
      'OL23037147M',
      'OL9032213M',
      'OL23070273M',
      'OL8880047M',
      'OL13268284M',
      'OL9137994M',
      'OL13268310M',
      'OL12545383M',
      'OL22738196M',
      'OL12538901M',
      'OL9355674M',
      'OL24274381M',
      'OL24276117M',
      'OL24085138M',
      'OL26080609M',
      'OL25159204M',
      'OL26456609M',
      'OL25421650M',
      'OL26757521M',
      'OL26757518M',
      'OL26757363M',
      'OL25652067M',
      'OL18291983M',
      'OL26313936M',
      'OL26374869M',
      'OL26677939M',
    ],
    cover_i: 8406761,
    subject: ['subj3'],
  },
  {
    title_suggest: 'd',
    edition_key: [
      'OL9228183M',
      'OL7273472M',
      'OL9228706M',
      'OL7880665M',
      'OL7273997M',
      'OL7591523M',
      'OL26757374M',
      'OL22368666M',
      'OL10682853M',
      'OL13931725M',
      'OL9131875M',
      'OL23041746M',
      'OL22146871M',
      'OL9403108M',
      'OL25713997M',
      'OL25418637M',
      'OL25418638M',
      'OL6363476M',
      'OL13875539M',
      'OL6366662M',
      'OL7465523M',
      'OL20388227M',
      'OL22306424M',
      'OL26215711M',
      'OL20352933M',
      'OL22804790M',
      'OL24595247M',
      'OL26477626M',
      'OL7273993M',
      'OL5526619M',
      'OL17911508M',
      'OL22761592M',
      'OL9228702M',
      'OL5550061M',
      'OL13875540M',
      'OL24821416M',
      'OL22788094M',
      'OL24375966M',
      'OL21080822M',
      'OL21755817M',
      'OL22369858M',
      'OL21563144M',
      'OL10681592M',
      'OL20943852M',
      'OL9893405M',
      'OL5416735M',
      'OL10682118M',
      'OL21392107M',
      'OL13816361M',
      'OL21826254M',
      'OL14449234M',
      'OL10682346M',
      'OL20943855M',
      'OL20889660M',
      'OL24353783M',
      'OL10682512M',
      'OL20943857M',
      'OL25769448M',
      'OL4564473M',
      'OL11346306M',
      'OL10683016M',
      'OL18005904M',
      'OL7274001M',
      'OL9228710M',
      'OL13704499M',
      'OL14732029M',
      'OL23029810M',
      'OL20184901M',
      'OL9228714M',
      'OL10683695M',
      'OL13647849M',
      'OL20943873M',
      'OL12552002M',
      'OL9386429M',
      'OL16794971M',
      'OL7274023M',
      'OL10684408M',
      'OL2846909M',
      'OL23243829M',
      'OL22400371M',
      'OL9228732M',
      'OL7466619M',
      'OL10683697M',
      'OL25175071M',
      'OL8173448M',
      'OL10684787M',
      'OL7406702M',
      'OL22942197M',
      'OL13349152M',
      'OL7973618M',
      'OL11222908M',
      'OL11222907M',
      'OL21968605M',
      'OL9375349M',
      'OL9228757M',
      'OL18639215M',
      'OL2105246M',
      'OL9228719M',
      'OL7466434M',
      'OL7274010M',
      'OL13904400M',
      'OL7274048M',
      'OL26676168M',
      'OL9045059M',
      'OL2033157M',
      'OL10680912M',
      'OL20943433M',
      'OL7465912M',
      'OL24209616M',
      'OL11038748M',
      'OL7601880M',
      'OL8321425M',
      'OL22735149M',
      'OL7672902M',
      'OL13268184M',
      'OL9792607M',
      'OL11152615M',
      'OL22836306M',
      'OL1937352M',
      'OL7273597M',
      'OL18565780M',
      'OL21217150M',
      'OL9228308M',
      'OL25874285M',
      'OL7343773M',
      'OL10236396M',
      'OL9298426M',
      'OL22108089M',
      'OL10635185M',
      'OL9652680M',
      'OL22950280M',
      'OL23040293M',
      'OL22940107M',
      'OL14975006M',
      'OL7850230M',
      'OL10236379M',
      'OL7850059M',
      'OL9211339M',
      'OL7256623M',
      'OL18565795M',
      'OL8181272M',
      'OL9209105M',
      'OL22452236M',
      'OL8610139M',
      'OL8195345M',
      'OL26389331M',
      'OL26389332M',
      'OL9137990M',
      'OL24946057M',
      'OL9131905M',
      'OL24608072M',
      'OL402765M',
      'OL10236412M',
      'OL7851787M',
      'OL16197261M',
      'OL17487312M',
      'OL18326661M',
      'OL18360267M',
      'OL7827594M',
      'OL22105270M',
      'OL7260441M',
      'OL7853033M',
      'OL9215156M',
      'OL25422116M',
      'OL24992840M',
      'OL9547987M',
      'OL24225231M',
      'OL10977379M',
      'OL10686521M',
      'OL6887272M',
      'OL7759555M',
      'OL10236397M',
      'OL9209244M',
      'OL22153252M',
      'OL9443590M',
      'OL9032793M',
      'OL23032214M',
      'OL15950279M',
      'OL10457133M',
      'OL9188443M',
      'OL8833408M',
      'OL7946404M',
      'OL7261174M',
      'OL7603640M',
      'OL10236401M',
      'OL24486716M',
      'OL9215889M',
      'OL10236413M',
      'OL9131849M',
      'OL26371117M',
      'OL9011370M',
      'OL9158189M',
      'OL12815020M',
      'OL8151615M',
      'OL8151617M',
      'OL10686044M',
      'OL9216158M',
      'OL7946036M',
      'OL9215852M',
      'OL8663942M',
      'OL3969888M',
      'OL7261137M',
      'OL24374464M',
      'OL24486835M',
      'OL7261443M',
      'OL9786619M',
      'OL8663943M',
      'OL7602066M',
      'OL9018092M',
      'OL7946405M',
      'OL9786395M',
      'OL20319069M',
      'OL25441857M',
      'OL8663969M',
      'OL7604539M',
      'OL7262174M',
      'OL9217079M',
      'OL7262364M',
      'OL10636822M',
      'OL3571142M',
      'OL9216889M',
      'OL10236414M',
      'OL10925146M',
      'OL8373889M',
      'OL23246795M',
      'OL9604991M',
      'OL12384893M',
      'OL9131936M',
      'OL16355411M',
      'OL10636839M',
      'OL9032161M',
      'OL23042414M',
      'OL8890613M',
      'OL10925422M',
      'OL8887608M',
      'OL10636840M',
      'OL9143965M',
      'OL8875466M',
      'OL7262049M',
      'OL9217398M',
      'OL7262683M',
      'OL7262684M',
      'OL10952411M',
      'OL9217399M',
      'OL3567009M',
      'OL7852209M',
      'OL9216764M',
      'OL7262739M',
      'OL9217454M',
      'OL23070303M',
      'OL23037147M',
      'OL9032213M',
      'OL23070273M',
      'OL8880047M',
      'OL13268284M',
      'OL9137994M',
      'OL13268310M',
      'OL12545383M',
      'OL22738196M',
      'OL12538901M',
      'OL9355674M',
      'OL24274381M',
      'OL24276117M',
      'OL24085138M',
      'OL26080609M',
      'OL25159204M',
      'OL26456609M',
      'OL25421650M',
      'OL26757521M',
      'OL26757518M',
      'OL26757363M',
      'OL25652067M',
      'OL18291983M',
      'OL26313936M',
      'OL26374869M',
      'OL26677939M',
    ],
    cover_i: 8406761,
    subject: ['subj2'],
  },
  {
    title_suggest: 'a',
    edition_key: [
      'OL9228183M',
      'OL7273472M',
      'OL9228706M',
      'OL7880665M',
      'OL7273997M',
      'OL7591523M',
      'OL26757374M',
      'OL22368666M',
      'OL10682853M',
      'OL13931725M',
      'OL9131875M',
      'OL23041746M',
      'OL22146871M',
      'OL9403108M',
      'OL25713997M',
      'OL25418637M',
      'OL25418638M',
      'OL6363476M',
      'OL13875539M',
      'OL6366662M',
      'OL7465523M',
      'OL20388227M',
      'OL22306424M',
      'OL26215711M',
      'OL20352933M',
      'OL22804790M',
      'OL24595247M',
      'OL26477626M',
      'OL7273993M',
      'OL5526619M',
      'OL17911508M',
      'OL22761592M',
      'OL9228702M',
      'OL5550061M',
      'OL13875540M',
      'OL24821416M',
      'OL22788094M',
      'OL24375966M',
      'OL21080822M',
      'OL21755817M',
      'OL22369858M',
      'OL21563144M',
      'OL10681592M',
      'OL20943852M',
      'OL9893405M',
      'OL5416735M',
      'OL10682118M',
      'OL21392107M',
      'OL13816361M',
      'OL21826254M',
      'OL14449234M',
      'OL10682346M',
      'OL20943855M',
      'OL20889660M',
      'OL24353783M',
      'OL10682512M',
      'OL20943857M',
      'OL25769448M',
      'OL4564473M',
      'OL11346306M',
      'OL10683016M',
      'OL18005904M',
      'OL7274001M',
      'OL9228710M',
      'OL13704499M',
      'OL14732029M',
      'OL23029810M',
      'OL20184901M',
      'OL9228714M',
      'OL10683695M',
      'OL13647849M',
      'OL20943873M',
      'OL12552002M',
      'OL9386429M',
      'OL16794971M',
      'OL7274023M',
      'OL10684408M',
      'OL2846909M',
      'OL23243829M',
      'OL22400371M',
      'OL9228732M',
      'OL7466619M',
      'OL10683697M',
      'OL25175071M',
      'OL8173448M',
      'OL10684787M',
      'OL7406702M',
      'OL22942197M',
      'OL13349152M',
      'OL7973618M',
      'OL11222908M',
      'OL11222907M',
      'OL21968605M',
      'OL9375349M',
      'OL9228757M',
      'OL18639215M',
      'OL2105246M',
      'OL9228719M',
      'OL7466434M',
      'OL7274010M',
      'OL13904400M',
      'OL7274048M',
      'OL26676168M',
      'OL9045059M',
      'OL2033157M',
      'OL10680912M',
      'OL20943433M',
      'OL7465912M',
      'OL24209616M',
      'OL11038748M',
      'OL7601880M',
      'OL8321425M',
      'OL22735149M',
      'OL7672902M',
      'OL13268184M',
      'OL9792607M',
      'OL11152615M',
      'OL22836306M',
      'OL1937352M',
      'OL7273597M',
      'OL18565780M',
      'OL21217150M',
      'OL9228308M',
      'OL25874285M',
      'OL7343773M',
      'OL10236396M',
      'OL9298426M',
      'OL22108089M',
      'OL10635185M',
      'OL9652680M',
      'OL22950280M',
      'OL23040293M',
      'OL22940107M',
      'OL14975006M',
      'OL7850230M',
      'OL10236379M',
      'OL7850059M',
      'OL9211339M',
      'OL7256623M',
      'OL18565795M',
      'OL8181272M',
      'OL9209105M',
      'OL22452236M',
      'OL8610139M',
      'OL8195345M',
      'OL26389331M',
      'OL26389332M',
      'OL9137990M',
      'OL24946057M',
      'OL9131905M',
      'OL24608072M',
      'OL402765M',
      'OL10236412M',
      'OL7851787M',
      'OL16197261M',
      'OL17487312M',
      'OL18326661M',
      'OL18360267M',
      'OL7827594M',
      'OL22105270M',
      'OL7260441M',
      'OL7853033M',
      'OL9215156M',
      'OL25422116M',
      'OL24992840M',
      'OL9547987M',
      'OL24225231M',
      'OL10977379M',
      'OL10686521M',
      'OL6887272M',
      'OL7759555M',
      'OL10236397M',
      'OL9209244M',
      'OL22153252M',
      'OL9443590M',
      'OL9032793M',
      'OL23032214M',
      'OL15950279M',
      'OL10457133M',
      'OL9188443M',
      'OL8833408M',
      'OL7946404M',
      'OL7261174M',
      'OL7603640M',
      'OL10236401M',
      'OL24486716M',
      'OL9215889M',
      'OL10236413M',
      'OL9131849M',
      'OL26371117M',
      'OL9011370M',
      'OL9158189M',
      'OL12815020M',
      'OL8151615M',
      'OL8151617M',
      'OL10686044M',
      'OL9216158M',
      'OL7946036M',
      'OL9215852M',
      'OL8663942M',
      'OL3969888M',
      'OL7261137M',
      'OL24374464M',
      'OL24486835M',
      'OL7261443M',
      'OL9786619M',
      'OL8663943M',
      'OL7602066M',
      'OL9018092M',
      'OL7946405M',
      'OL9786395M',
      'OL20319069M',
      'OL25441857M',
      'OL8663969M',
      'OL7604539M',
      'OL7262174M',
      'OL9217079M',
      'OL7262364M',
      'OL10636822M',
      'OL3571142M',
      'OL9216889M',
      'OL10236414M',
      'OL10925146M',
      'OL8373889M',
      'OL23246795M',
      'OL9604991M',
      'OL12384893M',
      'OL9131936M',
      'OL16355411M',
      'OL10636839M',
      'OL9032161M',
      'OL23042414M',
      'OL8890613M',
      'OL10925422M',
      'OL8887608M',
      'OL10636840M',
      'OL9143965M',
      'OL8875466M',
      'OL7262049M',
      'OL9217398M',
      'OL7262683M',
      'OL7262684M',
      'OL10952411M',
      'OL9217399M',
      'OL3567009M',
      'OL7852209M',
      'OL9216764M',
      'OL7262739M',
      'OL9217454M',
      'OL23070303M',
      'OL23037147M',
      'OL9032213M',
      'OL23070273M',
      'OL8880047M',
      'OL13268284M',
      'OL9137994M',
      'OL13268310M',
      'OL12545383M',
      'OL22738196M',
      'OL12538901M',
      'OL9355674M',
      'OL24274381M',
      'OL24276117M',
      'OL24085138M',
      'OL26080609M',
      'OL25159204M',
      'OL26456609M',
      'OL25421650M',
      'OL26757521M',
      'OL26757518M',
      'OL26757363M',
      'OL25652067M',
      'OL18291983M',
      'OL26313936M',
      'OL26374869M',
      'OL26677939M',
    ],
    cover_i: 8406761,
    subject: ['subj1'],
  },
];

describe('sorter', () => {
  it('should send a get req to the get author api', () => {
    const sortedBooks = booksFunction.booksSorter(testData);
    expect(sortedBooks.map(a => a.toLowerCase())).toEqual(['a', 'b', 'd']);
  });
});

describe('subject getter', () => {
  it('should get the subjects author books talk about', () => {
    const Subjects = booksFunction.subjectGetter(testData);
    expect(Subjects.map(a => a.toLowerCase())).toEqual([
      'subj1',
      'subj2',
      'subj3',
    ]);
  });

  it('ignores double subjects', () => {
    const Subjects = booksFunction.subjectGetter([
      ...testData,
      { subject: ['subj3'] },
      { subject: ['subj3', 'subj2'] },
    ]);
    expect(Subjects.map(a => a.toLowerCase())).toEqual([
      'subj1',
      'subj2',
      'subj3',
    ]);
  });
});
describe('Feature 2 : Show the subject the author write about', () => {
  it('Should return a sorted subjects list', async () => {
    const author = 'Yoel';
    const requester = {
      get: jest.fn().mockResolvedValue({ data: { docs: testData } }),
    };
    const booksApi = new BooksApi(requester);

    expect(
      await booksFunction.getSortedSubjectsByAuthor(author, booksApi)
    ).toEqual(booksFunction.subjectGetter(testData));
  });
  it('Should return all subjects that wrote by the author', async () => {
    const author = 'Yoel';
    const requester = {
      get: jest.fn().mockResolvedValue({ data: { docs: testData } }),
    };
    const booksApi = new BooksApi(requester);

    expect(
      (await booksFunction.getSortedSubjectsByAuthor(author, booksApi)).length
    ).toEqual(booksFunction.subjectGetter(testData).length);
  });
  it('Shouldnt change the subjects', async () => {
    const author = 'Yoel';
    const requester = {
      get: jest.fn().mockResolvedValue({ data: { docs: testData } }),
    };
    const booksApi = new BooksApi(requester);
    (await booksFunction.getSortedSubjectsByAuthor(author, booksApi)).forEach(
      (element, index) => {
        expect(element).toEqual(booksFunction.subjectGetter(testData)[index]);
      }
    );
  });
  it('Shouldnt make the first letter of subjects uppercase', async () => {
    const author = 'Yoel';
    const requester = {
      get: jest.fn().mockResolvedValue({ data: { docs: testData } }),
    };
    const booksApi = new BooksApi(requester);
    (await booksFunction.getSortedSubjectsByAuthor(author, booksApi)).forEach(
      (element, index) => {
        expect(element.charAt(0)).toEqual(
          booksFunction.subjectGetter(testData)[index].charAt(0)
        );
      }
    );
  });
});
describe('Feature 1 : Show sorted oposite books by author', () => {
  it('Should return a oposite sorted list of books', async () => {
    const author = 'Yoel';
    const requester = {
      get: jest.fn().mockResolvedValue({ data: { docs: testData } }),
    };
    const booksApi = new BooksApi(requester);

    expect(
      (await booksFunction.getSortedBooksByAuthor(author, booksApi)).map(
        a => a.title_suggest
      )
    ).toEqual(booksFunction.booksSorter(testData).map(a => a.title_suggest));
  });
  it('Sould return a oposite sorted list with keep match the other information with the book name', async () => {
    const author = 'Yoel';
    const requester = {
      get: jest.fn().mockResolvedValue({ data: { docs: testData } }),
    };
    const booksApi = new BooksApi(requester);

    expect(
      await booksFunction.getSortedBooksByAuthor(author, booksApi)
    ).toEqual(booksFunction.booksSorter(testData));
  });
  it('Souldnt lose information while sorting', async () => {
    const author = 'Yoel';
    const requester = {
      get: jest.fn().mockResolvedValue({ data: { docs: testData } }),
    };
    const booksApi = new BooksApi(requester);

    expect(
      (await booksFunction.getSortedBooksByAuthor(author, booksApi)).length
    ).toEqual(booksFunction.booksSorter(testData).length);
  });
  it('Souldnt change the strings information while sorting', async () => {
    const author = 'Yoel';
    const requester = {
      get: jest.fn().mockResolvedValue({ data: { docs: testData } }),
    };
    const booksApi = new BooksApi(requester);
    (await booksFunction.getSortedBooksByAuthor(author, booksApi)).forEach(
      (element, index) => {
        expect(element).toEqual(booksFunction.booksSorter(testData)[index]);
      }
    );
  });
  it('Souldn make first letter UpperCase', async () => {
    const author = 'Yoel';
    const requester = {
      get: jest.fn().mockResolvedValue({ data: { docs: testData } }),
    };
    const booksApi = new BooksApi(requester);
    (await booksFunction.getSortedBooksByAuthor(author, booksApi)).forEach(
      (element, index) => {
        expect(element.charAt(0)).toEqual(
          booksFunction
            .booksSorter(testData)
            [index].charAt(0)
            .toUpperCase()
        );
      }
    );
  });
});
